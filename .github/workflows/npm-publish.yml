name: Node.js CI/CD User

on:
  push:
    branches: 
      - main
      - release/*
  pull_request:
    branches: [ "main" ]

jobs:
  SonarQubeAnalysis:
    runs-on: ubuntu-latest
    name: SonarQube Analysis
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ctse
          
  BuildandTest:
    needs: SonarQubeAnalysis
    runs-on: ubuntu-latest
    name: Build and Test
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install dependencies
      run: npm install
    - name: Build
      run: npm run build --if-present
    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
        project: 'test'
        path: '.' # Update this path if necessary
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
    - name: Upload Test results
      uses: actions/upload-artifact@v2
      with:
        name: depcheck-report
        path: ${{ github.workspace }}/reports
    - name: Test
      run: npm test
      
  SnykSecurityScan:
    needs: BuildandTest
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Snyk CLI
      run: npm install -g snyk
    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_API_TOKEN }}
    - name: Snyk Scan
      run: snyk test --json > snyk_report.json || true
    - name: Upload Snyk report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: snyk-report
        path: snyk_report.json

  SecretsScanning:
    needs: BuildandTest
    runs-on: ubuntu-latest
    name: Secrets Scanning
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install GitLeaks
        run: |
          wget -O git-leaks https://github.com/zricethezav/gitleaks/releases/download/v7.4.1/gitleaks-linux-amd64
          chmod +x git-leaks
          sudo mv git-leaks /usr/local/bin/
      - name: Run GitLeaks
        run: git-leaks
        
  Containerization:
    needs: [SnykSecurityScan, SecretsScanning]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN  }} # Using Docker password secret
    - name: Build Docker image
      run: |
        docker build -t ctse2024/user-service:${{ github.run_id }} .
    - name: Scan Docker image for vulnerabilities
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/root/ aquasec/trivy image ctse2024/user-service:${{ github.run_id }} > trivy_report.json || true
    - name: Upload Trivy report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: trivy-report
        path: trivy_report.json
    - name: Push Docker image to Docker Hub
      run: |
        docker push ctse2024/user-service:${{ github.run_id }}

  DeployToAKS:
    needs: Containerization
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: 'Log into Azure using github secret AZURE_CREDENTIALS'
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
    - name: 'Run az commands'
      run: |
        az account show
        az group list
    - name: Set Azure subscription
      run: az account set --subscription ${{ secrets.AZ_SUBSCRIPTION_ID }}
    - name: Set AKS context
      run: az aks get-credentials --resource-group ${{ secrets.AZ_RESOURCE_GROUP }} --name ${{ secrets.AZ_CLUSTER }}
    - name: Modify deployment YAML
      run: |
        sed -i 's|ctse2024/user-service:TAG|ctse2024/user-service:${{ github.run_id }}|' kubernetes/user-deployment.yaml
    - name: Deploy to AKS
      run: kubectl apply -f kubernetes/
    - name: Get Service IP Address
      run: kubectl get services
        
